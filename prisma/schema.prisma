// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int       @id @default(autoincrement())
  description String
  client      String
  date        String
  contexte    String    @db.Text // Utilisation de Text pour de longs textes
  approche    String    @db.Text // Optionnel: Ã©galement pour des longs textes
  tags        Tag[]
  images      Image[]
  altTexts    AltText[]
  logo        String?
  github      String
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(2048)
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
}

model AltText {
  id        Int      @id @default(autoincrement())
  text      String
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
